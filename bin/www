#!/usr/bin/env node

const TXW = require('lib/txw');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**************** START MODE CONTROL *****************/

// Create HTTP Server
const createHttpServer = function() {

	/**
	* Create HTTP server.
	*/
	const server = http.createServer(app);

	/**
	* Listen on provided port, on all network interfaces.
	*/
	server.listen(port);  
	server.on('error', onError);
	server.on('listening', onListening);

	/* done */
	return(server);
}

// Check Start Mode
if (!TXW.isDefined(process.env.NODE_ENV) || (process.env.NODE_ENV == 'development')) {
	var server = createHttpServer();
}
else {
	const CLUSTER_LOG = require('debug')('nodepop:cluster');
	const cluster = require('cluster');

	/* check */
	if (!cluster.isMaster) {
		var server = createHttpServer();
	}
	else {
		/* */
		cluster.on('listening', (worker, address) => {
			CLUSTER_LOG(`Worker ${worker.id} con PID ${worker.process.pid} conectado a puerto ${address.port}`);
		});
		cluster.on('exit', (worker, code, signal) => {
			CLUSTER_LOG(`Worker ${worker.process.pid} muerto con código ${code} y señal ${signal}`);
			cluster.fork();
		});

		/* fork workers */
		const coresCount = require('os').cpus().length;
		for (let i = 0; i < coresCount; i++)
			cluster.fork();
	}
}

/*****************************************************/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
